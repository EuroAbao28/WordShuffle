import { useEffect, useState } from "react";
import "./App.css";
import ModalCorrect from "./ModalCorrect";
import Backdrop from "./Backdrop";
import { motion } from "framer-motion";

function App() {
  const apiLink = `https://random-word-api.vercel.app/api?words=1&length=5&type=uppercase`;
  const [word, setWord] = useState("");
  const [origWord, setOrigWord] = useState("");
  const [normal, setNormal] = useState("");
  const [selected, setSelected] = useState([]);
  const [answer, setAnswer] = useState([]);
  const [buttonClick, setButtonClick] = useState(0);

  // Modal Message
  const [isCorrect, setIsCorrect] = useState(false);
  const [IsWrong, setIsWrong] = useState(false);

  const shuffle = (word) => {
    const arryStr = word.split("");
    const arryLength = word.length;
    for (let index = arryLength - 1; index > 0; index--) {
      let ranNumb = Math.floor(Math.random() * (index + 1));
      let temp = arryStr[index];
      arryStr[index] = arryStr[ranNumb];
      arryStr[ranNumb] = temp;
    }
    const toString = arryStr.join("");
    setNormal(toString);
    console.log(toString);
    return toString;
  };

  const generate = async () => {
    fetch(apiLink)
      .then((response) => response.json())
      .then((data) => setWord(data))
      .then(console.log("WORD: " + word))
      .then(setOrigWord(word))
      .then(console.log("CURRENT LEVEL: " + buttonClick));
  };

  useEffect(() => {
    generate();
    shuffle(String(word));
  }, [buttonClick]);

  const handleSubmit = () => {
    if (answer == null) return;
    if (answer.length < 5) return;
    if (answer != "") {
      console.log("Your Answer: " + answer.join(""));
      if (answer.join("") == origWord) {
        console.log("You are correct!");
        setIsCorrect(true);
      }
      if (answer.join("") != origWord) {
        console.log("You are wrong!");
        setIsWrong(true);
      }
    }
  };

  const handleNext = () => {
    console.log("HandleNext clicked!");
    setIsCorrect(false);
    setIsWrong(false);
    setButtonClick(buttonClick + 1);
    setAnswer("");
    setSelected("");
  };

  return (
    <div className="screen">
      {isCorrect && (
        <ModalCorrect
          handleNext={handleNext}
          status={"status-correct"}
          answer={answer}
          message={"Keep it going, your answer is correct!"}
        />
      )}
      {IsWrong && (
        <ModalCorrect
          handleNext={handleNext}
          status={"status-wrong"}
          answer={origWord}
          message={"Your answer " + answer.join("") + " is incorrect!"}
        />
      )}
      {isCorrect || IsWrong ? <Backdrop /> : null}
      <div className="container">
        <header>
          <h2>Word Shuffle</h2>
          <p onClick={() => setButtonClick(buttonClick + 1)}>Start</p>
        </header>
        <div className="content-container">
          <div className="ingame-info-container">
            <div className="right">
              <p>
                Time: <span>00:12</span>
              </p>
              <p>Lives:</p>
            </div>
            <p>Level: 7</p>
          </div>
          <div className="word-shuffle">
            {normal.split("").map((letter, index) => (
              <button
                key={Math.floor(Math.random() * 99999 + 1)}
                onClick={() => {
                  if (!selected.includes(index)) {
                    setAnswer((newArry) => [...newArry, letter]);
                    console.log(answer);
                    setSelected((newArry) => [...newArry, index]);
                    console.log(selected);
                  }
                }}
                style={
                  selected.includes(index)
                    ? { backgroundColor: "rgba(0, 0, 0, 0.1)" }
                    : { backgroundColor: "white" }
                }>
                {letter}
              </button>
            ))}
          </div>
          <div className="input">
            <p className="user-answer">{answer ? answer.join("") : null}</p>
            <button
              onClick={() => {
                setAnswer("");
                setSelected("");
              }}
              className="clear">
              RESET
            </button>
          </div>
          <div className="user-action">
            <button
              onClick={() => {
                shuffle(normal);
                setAnswer("");
                setSelected("");
              }}
              className="shuffle-btn">
              Re-shuffle
            </button>
            <button onClick={handleSubmit} className="submit-btn">
              Submit
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
